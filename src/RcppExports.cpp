// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bindist
Rcpp::List bindist(NumericMatrix binmat, NumericMatrix data);
RcppExport SEXP _FACkit_bindist(SEXP binmatSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type binmat(binmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(bindist(binmat, data));
    return rcpp_result_gen;
END_RCPP
}
// snlocation
NumericVector snlocation(std::vector<double> markdat);
RcppExport SEXP _FACkit_snlocation(SEXP markdatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type markdat(markdatSEXP);
    rcpp_result_gen = Rcpp::wrap(snlocation(markdat));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _FACkit_binclust2(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_FACkit_bindist", (DL_FUNC) &_FACkit_bindist, 2},
    {"_FACkit_snlocation", (DL_FUNC) &_FACkit_snlocation, 1},
    {"_FACkit_binclust2",  (DL_FUNC) &_FACkit_binclust2,  2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FACkit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
